generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  name             String
  lastName         String?
  adminType        AdminType          @default(PLATFORM)
  role             AdminRole          @default(MODERATOR)
  permissions      AdminPermission[]
  sellerId         String?
  isActive         Boolean            @default(true)
  isEmailVerified  Boolean            @default(false)
  accountLocked    Boolean            @default(false)
  loginAttempts    Int                @default(0)
  lastLoginAt      DateTime?
  lastLoginIp      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  cityId           Int?
  countryId        Int?
  countyId         Int?
  regionId         Int?
  City             City?              @relation(fields: [cityId], references: [id])
  Country          Country?           @relation(fields: [countryId], references: [id])
  County           County?            @relation(fields: [countyId], references: [id])
  Region           Region?            @relation(fields: [regionId], references: [id])
  Seller           Seller?            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  AdminActivityLog AdminActivityLog[]
  posts            BlogPost[]

  @@index([adminType])
  @@index([email])
  @@index([isActive])
  @@index([sellerId])
}

model Country {
  id      Int      @id @default(autoincrement())
  country String
  Admin   Admin[]
  regions Region[]
  sellers Seller[]
}

model Region {
  id        Int      @id @default(autoincrement())
  region    String
  countryId Int
  Admin     Admin[]
  cities    City[]
  country   Country  @relation(fields: [countryId], references: [id])
  sellers   Seller[]
}

model City {
  id       Int      @id @default(autoincrement())
  city     String
  regionId Int
  Admin    Admin[]
  region   Region   @relation(fields: [regionId], references: [id])
  counties County[]
  sellers  Seller[]
}

model County {
  id      Int      @id @default(autoincrement())
  county  String
  cityId  Int
  Admin   Admin[]
  city    City     @relation(fields: [cityId], references: [id])
  sellers Seller[]
}

/// //////////////////////////////////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////////////////////////////////
model Match {
  id         Int      @id @default(autoincrement())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  isMatched  Boolean  @default(false)
  receiver   Seller   @relation("MatchReceiver", fields: [receiverId], references: [id])
  sender     Seller   @relation("MatchSender", fields: [senderId], references: [id])
}

model Story {
  id          Int      @id @default(autoincrement())
  images      String[]
  title       String
  description String
  sellerId    String
  seller      Seller   @relation(fields: [sellerId], references: [id])
}

/// //////////////////////////////////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////////////////////////////////
model Department {
  id                   Int                  @id @default(autoincrement())
  departmentName       String
  departmentImage      String?
  departmentCategories DepartmentCategory[]
}

model DepartmentCategory {
  id                     Int               @id @default(autoincrement())
  departmentId           Int
  departmentCategoryName String
  department             Department        @relation(fields: [departmentId], references: [id])
  productCategories      ProductCategory[]
}

model ProductCategory {
  id                         Int                     @id @default(autoincrement())
  departmentCategoryId       Int
  averageWeight              Float?                  @default(0.0)
  fifthMaterialTypeId        Int?
  fifthMaterialTypeQuantity  Float?                  @default(0.0)
  firstMaterialTypeId        Int?
  firstMaterialTypeQuantity  Float?                  @default(0.0)
  fourthMaterialTypeId       Int?
  fourthMaterialTypeQuantity Float?                  @default(0.0)
  keywords                   String[]
  productCategoryName        String
  secondMaterialTypeId       Int?
  secondMaterialTypeQuantity Float?                  @default(0.0)
  size                       ProductSize?            @default(M)
  thirdMaterialTypeId        Int?
  thirdMaterialTypeQuantity  Float?                  @default(0.0)
  weightUnit                 WeightUnit?             @default(KG)
  products                   Product[]
  departmentCategory         DepartmentCategory      @relation(fields: [departmentCategoryId], references: [id])
  fifthMaterialType          MaterialImpactEstimate? @relation("FifthMaterialType", fields: [fifthMaterialTypeId], references: [id])
  firstMaterialType          MaterialImpactEstimate? @relation("FirstMaterialType", fields: [firstMaterialTypeId], references: [id])
  fourthMaterialType         MaterialImpactEstimate? @relation("FourthMaterialType", fields: [fourthMaterialTypeId], references: [id])
  secondMaterialType         MaterialImpactEstimate? @relation("SecondMaterialType", fields: [secondMaterialTypeId], references: [id])
  thirdMaterialType          MaterialImpactEstimate? @relation("ThirdMaterialType", fields: [thirdMaterialTypeId], references: [id])
}

model Product {
  id                                            Int              @id @default(autoincrement())
  name                                          String
  description                                   String
  price                                         Int
  hasOffer                                      Boolean          @default(false)
  offerPrice                                    Int              @default(0)
  stock                                         Int              @default(0)
  sellerId                                      String
  badges                                        Badge[]
  barcode                                       String?          @unique
  brand                                         String
  color                                         String?
  createdAt                                     DateTime         @default(now())
  images                                        String[]
  interests                                     String[]
  isActive                                      Boolean          @default(true)
  isExchangeable                                Boolean          @default(false)
  productCategoryId                             Int
  ratingCount                                   Int              @default(0)
  ratings                                       Float            @default(0)
  reviewsNumber                                 Int              @default(0)
  sku                                           String?
  updatedAt                                     DateTime         @updatedAt
  condition                                     ProductCondition @default(NEW)
  conditionDescription                          String?
  sustainabilityScore                           Int?
  materialComposition                           String?
  recycledContent                               Float?
  chats                                         Chat[]
  Exchange_Exchange_offeredProductIdToProduct   Exchange[]       @relation("Exchange_offeredProductIdToProduct")
  Exchange_Exchange_requestedProductIdToProduct Exchange[]       @relation("Exchange_requestedProductIdToProduct")
  itemsOrdered                                  OrderItem[]
  productCategory                               ProductCategory  @relation(fields: [productCategoryId], references: [id])
  seller                                        Seller           @relation(fields: [sellerId], references: [id])
  comments                                      ProductComment[]
  likes                                         ProductLike[]
  productVariants                               ProductVariant[]

  @@index([sellerId])
  @@index([productCategoryId])
  @@index([isActive])
  @@index([createdAt])
  @@index([price])
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  name      String
  price     Int
  stock     Int
  color     String?
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, color, size])
}

model ProductLike {
  id        Int     @id @default(autoincrement())
  productId Int
  sellerId  String
  product   Product @relation(fields: [productId], references: [id])
  seller    Seller  @relation(fields: [sellerId], references: [id])
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  comment   String
  productId Int
  sellerId  String
  createdAt DateTime @default(now())
  rating    Int?
  product   Product  @relation(fields: [productId], references: [id])
  seller    Seller   @relation(fields: [sellerId], references: [id])
}

model ServiceReview {
  id         Int      @id @default(autoincrement())
  serviceId  Int
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  reviewer   Seller   @relation("ServiceReviews", fields: [reviewerId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
}

model Transaction {
  id              Int             @id @default(autoincrement())
  kind            TransactionKind
  pointsCollected Int
  createdAt       DateTime        @default(now())
  sellerId        String
  exchange        Exchange?
  seller          Seller          @relation(fields: [sellerId], references: [id])
}

model Order {
  id               Int            @id @default(autoincrement())
  sellerId         String
  createdAt        DateTime       @default(now())
  shippingStatusId Int
  seller           Seller         @relation(fields: [sellerId], references: [id])
  shippingStatus   ShippingStatus @relation(fields: [shippingStatusId], references: [id])
  orderItems       OrderItem[]
  payments         Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model ShippingStatus {
  id     Int           @id @default(autoincrement())
  status ShippingStage @default(PREPARING)
  orders Order[]
}

model Chat {
  id         Int       @id @default(autoincrement())
  senderId   String
  receiverId String
  productId  Int?
  isExchange Boolean   @default(false)
  createdAt  DateTime  @default(now())
  product    Product?  @relation(fields: [productId], references: [id])
  receiver   Seller    @relation("ChatReceiver", fields: [receiverId], references: [id])
  sender     Seller    @relation("ChatSender", fields: [senderId], references: [id])
  messages   Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    Seller   @relation(fields: [senderId], references: [id])
}

model Exchange {
  id                 Int            @id @default(autoincrement())
  transactionId      Int            @unique
  offeredProductId   Int
  requestedProductId Int
  status             ExchangeStatus @default(PENDING)
  notes              String?
  createdAt          DateTime       @default(now())
  completedAt        DateTime?
  offeredProduct     Product        @relation("Exchange_offeredProductIdToProduct", fields: [offeredProductId], references: [id])
  requestedProduct   Product        @relation("Exchange_requestedProductIdToProduct", fields: [requestedProductId], references: [id])
  transaction        Transaction    @relation(fields: [transactionId], references: [id])
}

/// //////////////////////////////////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////////////////////////////////
model MaterialImpactEstimate {
  id                      Int               @id @default(autoincrement())
  materialType            String
  estimatedCo2SavingsKG   Float
  estimatedWaterSavingsLT Float
  fifthMaterialTypeFor    ProductCategory[] @relation("FifthMaterialType")
  firstMaterialTypeFor    ProductCategory[] @relation("FirstMaterialType")
  fourthMaterialTypeFor   ProductCategory[] @relation("FourthMaterialType")
  secondMaterialTypeFor   ProductCategory[] @relation("SecondMaterialType")
  thirdMaterialTypeFor    ProductCategory[] @relation("ThirdMaterialType")
}

model Co2ImpactMessage {
  id       Int    @id @default(autoincrement())
  min      Float  @default(0.0)
  max      Float  @default(0.0)
  message1 String
  message2 String
  message3 String
}

model WaterImpactMessage {
  id       Int    @id @default(autoincrement())
  min      Float  @default(0.0)
  max      Float  @default(0.0)
  message1 String
  message2 String
  message3 String
}

model Notification {
  id        Int                  @id @default(autoincrement())
  sellerId  String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean              @default(false)
  priority  NotificationPriority @default(MEDIUM)
  relatedId String?
  actionUrl String?
  metadata  Json?
  createdAt DateTime             @default(now())
  readAt    DateTime?
  seller    Seller               @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
}

model Payment {
  id              Int                    @id @default(autoincrement())
  orderId         Int?
  quotationId     Int?
  amount          Float
  currency        String                 @default("CLP")
  status          PaymentStatus          @default(PENDING)
  paymentProvider ChileanPaymentProvider
  externalId      String?                @unique
  externalToken   String?
  description     String?
  fees            Float?                 @default(0)
  netAmount       Float?
  payerId         String
  receiverId      String
  failureReason   String?
  metadata        Json?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  processedAt     DateTime?
  refundedAt      DateTime?
  chileanConfigId Int
  chileanConfig   ChileanPaymentConfig   @relation("ChileanPaymentConfig", fields: [chileanConfigId], references: [id])
  order           Order?                 @relation(fields: [orderId], references: [id])
  payer           Seller                 @relation("PaymentPayer", fields: [payerId], references: [id])
  quotation       Quotation?             @relation(fields: [quotationId], references: [id])
  receiver        Seller                 @relation("PaymentReceiver", fields: [receiverId], references: [id])
  refunds         PaymentRefund[]
  transactions    PaymentTransaction[]
  webhooks        PaymentWebhook[]

  @@index([orderId])
  @@index([quotationId])
  @@index([status])
  @@index([payerId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([externalId])
  @@index([paymentProvider])
}

model PaymentRefund {
  id          Int          @id @default(autoincrement())
  paymentId   Int
  amount      Float
  reason      String
  status      RefundStatus @default(PENDING)
  externalId  String?
  createdAt   DateTime     @default(now())
  processedAt DateTime?
  payment     Payment      @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([status])
}

model NotificationTemplate {
  id        Int              @id @default(autoincrement())
  type      NotificationType @unique
  title     String
  message   String
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([type])
}

model PaymentWebhook {
  id              Int                    @id @default(autoincrement())
  paymentId       Int?
  provider        ChileanPaymentProvider
  eventType       String
  externalId      String
  payload         Json
  processed       Boolean                @default(false)
  processingError String?
  createdAt       DateTime               @default(now())
  processedAt     DateTime?
  payment         Payment?               @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([provider])
  @@index([processed])
  @@index([externalId])
}

model PaymentTransaction {
  id          Int      @id @default(autoincrement())
  paymentId   Int
  action      String
  amount      Float?
  status      String
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  createdBy   String?
  payment     Payment  @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([action])
  @@index([createdAt])
}

model ChileanPaymentConfig {
  id          Int                    @id @default(autoincrement())
  sellerId    String
  provider    ChileanPaymentProvider
  merchantId  String?
  apiKey      String?
  secretKey   String?
  environment PaymentEnvironment     @default(SANDBOX)
  isActive    Boolean                @default(true)
  webhookUrl  String?
  returnUrl   String?
  cancelUrl   String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  seller      Seller                 @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  payments    Payment[]              @relation("ChileanPaymentConfig")

  @@unique([sellerId, provider])
  @@index([sellerId])
  @@index([provider])
}

/// //////////////////////////////////////////////////////////////////////////////////////////////////////
/// //////////////////////////////////////////////////////////////////////////////////////////////////////
model Seller {
  id                     String                 @id @default(uuid())
  email                  String                 @unique
  password               String
  sellerType             SellerType
  isActive               Boolean                @default(true)
  isVerified             Boolean                @default(false)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  address                String?                @default("")
  cityId                 Int?
  countryId              Int?
  countyId               Int?
  regionId               Int?
  phone                  String?                @default("")
  website                String?
  preferredContactMethod ContactMethod?         @default(WHATSAPP)
  socialMediaLinks       Json?
  accountType            AccountType?           @default(FREE)
  points                 Int?                   @default(0)
  sellerCategoryId       Int?
  Admin                  Admin[]
  BusinessProfile        BusinessProfile?
  receivedChats          Chat[]                 @relation("ChatReceiver")
  sentChats              Chat[]                 @relation("ChatSender")
  chileanPaymentConfigs  ChileanPaymentConfig[]
  communityComments      CommunityComment[]
  communityPosts         CommunityPost[]
  matchesReceived        Match[]                @relation("MatchReceiver")
  matchesSent            Match[]                @relation("MatchSender")
  messages               Message[]
  notifications          Notification[]
  orders                 Order[]
  paymentsAsPayer        Payment[]              @relation("PaymentPayer")
  paymentsAsReceiver     Payment[]              @relation("PaymentReceiver")
  personProfile          PersonProfile?
  products               Product[]
  productComments        ProductComment[]
  productLikes           ProductLike[]
  quotationsAsClient     Quotation[]            @relation("QuotationClient")
  quotationsAsProvider   Quotation[]            @relation("QuotationProvider")
  city                   City?                  @relation(fields: [cityId], references: [id])
  country                Country?               @relation(fields: [countryId], references: [id])
  county                 County?                @relation(fields: [countyId], references: [id])
  region                 Region?                @relation(fields: [regionId], references: [id])
  sellerCategory         SellerCategory?        @relation(fields: [sellerCategoryId], references: [id])
  preferences            SellerPreferences?
  services               Service[]
  serviceReviews         ServiceReview[]        @relation("ServiceReviews")
  stories                Story[]
  transactions           Transaction[]

  @@index([email])
  @@index([sellerType])
  @@index([isActive])
  @@index([isVerified])
  @@index([cityId])
}

model SellerPreferences {
  id                 Int     @id @default(autoincrement())
  sellerId           String  @unique
  preferredLanguage  String? @default("es")
  currency           String? @default("CLP")
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  orderUpdates       Boolean @default(true)
  communityUpdates   Boolean @default(true)
  securityAlerts     Boolean @default(true)
  weeklySummary      Boolean @default(false)
  twoFactorAuth      Boolean @default(false)
  seller             Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model PersonProfile {
  id             String    @id @default(uuid())
  sellerId       String    @unique
  firstName      String
  lastName       String?
  displayName    String?
  bio            String?
  birthday       DateTime?
  profileImage   String?
  coverImage     String?
  allowExchanges Boolean   @default(true)
  seller         Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model SellerCategory {
  id                     Int      @id @default(autoincrement())
  name                   String
  categoryDiscountAmount Int
  pointsThreshold        Int
  level                  Int
  sellers                Seller[]
}

model ServiceCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  services    Service[]
}

model Service {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  sellerId    String
  categoryId  Int
  pricingType ServicePricing  @default(QUOTATION)
  basePrice   Float?
  priceRange  String?
  duration    Int?
  isActive    Boolean         @default(true)
  images      String[]
  tags        String[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  quotations  Quotation[]
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  seller      Seller          @relation(fields: [sellerId], references: [id])
  reviews     ServiceReview[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([isActive])
  @@index([pricingType])
}

model Quotation {
  id                Int             @id @default(autoincrement())
  serviceId         Int
  clientId          String
  providerId        String
  title             String
  description       String
  estimatedPrice    Float?
  finalPrice        Float?
  estimatedDuration Int?
  status            QuotationStatus @default(PENDING)
  clientNotes       String?
  providerNotes     String?
  attachments       String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  expiresAt         DateTime?
  acceptedAt        DateTime?
  completedAt       DateTime?
  payments          Payment[]
  client            Seller          @relation("QuotationClient", fields: [clientId], references: [id])
  provider          Seller          @relation("QuotationProvider", fields: [providerId], references: [id])
  service           Service         @relation(fields: [serviceId], references: [id])
}

/// ////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ////////////////////////////////////////////////////////////////////////////////////////////////////////
model BlogPost {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  authorId    String
  tags        String[]
  isPublished Boolean      @default(false)
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    BlogCategory @default(OTHER)
  author      Admin        @relation(fields: [authorId], references: [id])

  @@index([isPublished])
  @@index([publishedAt])
  @@index([category])
}

model CommunityPost {
  id           Int                @id @default(autoincrement())
  sellerId     String
  content      String
  images       String[]
  likes        Int                @default(0)
  comments     Int                @default(0)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  commentsList CommunityComment[]
  seller       Seller             @relation(fields: [sellerId], references: [id])

  @@index([sellerId])
  @@index([createdAt])
}

model CommunityComment {
  id              Int           @id @default(autoincrement())
  communityPostId Int
  sellerId        String
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  communityPost   CommunityPost @relation(fields: [communityPostId], references: [id])
  seller          Seller        @relation(fields: [sellerId], references: [id])

  @@index([communityPostId])
  @@index([sellerId])
  @@index([createdAt])
}

model AdminActivityLog {
  id         Int      @id @default(autoincrement())
  adminId    String
  action     String
  entityType String?
  entityId   String?
  changes    Json?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime @default(now())
  Admin      Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([adminId])
  @@index([createdAt])
  @@index([entityType])
}

model BusinessProfile {
  id                       String                      @id
  sellerId                 String                      @unique
  businessName             String
  displayName              String?
  description              String?
  logo                     String?
  coverImage               String?
  businessType             BusinessType
  legalBusinessName        String?
  taxId                    String?                     @unique
  businessActivity         String?
  businessStartDate        DateTime?
  legalRepresentative      String?
  legalRepresentativeTaxId String?
  formalizationStatus      BusinessFormalizationStatus @default(NOT_REQUIRED)
  formalizationDeadline    DateTime?
  formalizationNotes       String?
  minOrderAmount           Int?
  shippingPolicy           String?
  returnPolicy             String?
  serviceArea              String?
  yearsOfExperience        Int?
  licenseNumber            String?
  insuranceInfo            String?
  certifications           String[]
  emergencyService         Boolean                     @default(false)
  travelRadius             Int?
  businessHours            Json?
  taxDocuments             String[]
  verificationDocuments    String[]
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime
  Seller                   Seller                      @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([businessType])
  @@index([formalizationStatus])
  @@index([taxId])
}

enum AdminRole {
  SUPER_ADMIN
  MODERATOR
  CONTENT_MANAGER
  SUPPORT
  BUSINESS_OWNER
  BUSINESS_MANAGER
  BUSINESS_ANALYST
  BUSINESS_SUPPORT
}

enum AccountType {
  FREE
  PLUS
  PREMIUM
}

enum TransactionKind {
  PURCHASE
  EXCHANGE
  GIFT
  REFERRAL
  BONUS
}

enum ShippingStage {
  PREPARING
  SHIPPED
  DELIVERED
  RETURNED
  CANCELED
}

enum Badge {
  POPULAR
  DISCOUNTED
  WOMAN_OWNED
  BEST_SELLER
  TOP_RATED
  COMMUNITY_FAVORITE
  LIMITED_TIME_OFFER
  FLASH_SALE
  BEST_VALUE
  HANDMADE
  SUSTAINABLE
  SUPPORTS_CAUSE
  FAMILY_BUSINESS
  CHARITY_SUPPORT
  LIMITED_STOCK
  SEASONAL
  FREE_SHIPPING
  FOR_REPAIR
  REFURBISHED
  EXCHANGEABLE
  LAST_PRICE
  FOR_GIFT
  OPEN_TO_OFFERS
  OPEN_BOX
  CRUELTY_FREE
  DELIVERED_TO_HOME
  IN_HOUSE_PICKUP
  IN_MID_POINT_PICKUP
}

enum ContactMethod {
  EMAIL
  WHATSAPP
  PHONE
  INSTAGRAM
  FACEBOOK
  WEBSITE
  TIKTOK
}

enum WeightUnit {
  KG
  LB
  OZ
  G
}

enum ProductSize {
  XS
  S
  M
  L
  XL
}

enum ExchangeStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
  CANCELLED
}

enum ProductCondition {
  NEW
  OPEN_BOX
  LIKE_NEW
  FAIR
  POOR
  FOR_PARTS
  REFURBISHED
}

enum SellerType {
  PERSON
  STARTUP
  COMPANY
}

enum ServicePricing {
  FIXED
  QUOTATION
  HOURLY
  PACKAGE
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
  CANCELLED
  EXPIRED
}

enum NotificationType {
  ORDER_RECEIVED
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  QUOTATION_REQUEST
  QUOTATION_RECEIVED
  QUOTATION_ACCEPTED
  QUOTATION_DECLINED
  EXCHANGE_PROPOSAL
  EXCHANGE_ACCEPTED
  EXCHANGE_DECLINED
  EXCHANGE_COMPLETED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  REVIEW_RECEIVED
  MESSAGE_RECEIVED
  PRODUCT_LIKED
  PRODUCT_COMMENTED
  SYSTEM_ANNOUNCEMENT
  ACCOUNT_VERIFICATION
  PROFILE_UPDATED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
  EXPIRED
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentEnvironment {
  SANDBOX
  PRODUCTION
}

enum BlogCategory {
  RECYCLING
  POLLUTION
  SUSTAINABILITY
  CIRCULAR_ECONOMY
  USED_PRODUCTS
  REUSE
  ENVIRONMENT
  UPCYCLING
  RESPONSIBLE_CONSUMPTION
  ECO_TIPS
  ENVIRONMENTAL_IMPACT
  SUSTAINABLE_LIVING
  OTHER
  SECURITY
}

enum AdminPermission {
  MANAGE_PRODUCTS
  APPROVE_PRODUCTS
  DELETE_PRODUCTS
  WRITE_BLOG
  PUBLISH_BLOG
  DELETE_BLOG
  MODERATE_CONTENT
  MANAGE_USERS
  BAN_USERS
  VIEW_USER_DATA
  MANAGE_ORDERS
  PROCESS_REFUNDS
  VIEW_TRANSACTIONS
  VIEW_ANALYTICS
  EXPORT_DATA
  MANAGE_ADMINS
  MANAGE_CATEGORIES
  MANAGE_SETTINGS
  VIEW_SYSTEM_LOGS
  MANAGE_BUSINESS_PROFILE
  MANAGE_BUSINESS_TEAM
  VIEW_BUSINESS_ANALYTICS
  MANAGE_BUSINESS_PRODUCTS
  MANAGE_BUSINESS_ORDERS
}

enum AdminType {
  PLATFORM
  BUSINESS
}

enum BusinessFormalizationStatus {
  NOT_REQUIRED
  PENDING
  IN_PROGRESS
  FORMALIZED
}

enum BusinessType {
  RETAIL
  SERVICES
  MIXED
}

enum ChileanPaymentProvider {
  KHIPU
  WEBPAY
}
